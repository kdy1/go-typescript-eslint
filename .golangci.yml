# golangci-lint configuration
# Documentation: https://golangci-lint.run/usage/configuration/

version: "2"

run:
  # Timeout for analysis
  timeout: 5m

  # Include test files
  tests: true

  # Allow multiple parallel golangci-lint instances running
  allow-parallel-runners: true

# Output configuration
output: {}

# Linters settings
linters:
  settings:
    errcheck:
      # Report about not checking of errors in type assertions: `a := b.(MyStruct)`
      check-type-assertions: true

      # Report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`
      check-blank: true

    govet:
      # Enable all analyzers
      enable-all: true

      # Disable specific analyzers
      disable:
        - shadow  # Reports variables that shadow other variables

    gocyclo:
      # Minimal code complexity to report
      min-complexity: 15

    dupl:
      # Tokens count to trigger issue
      threshold: 100

    goconst:
      # Minimal length of string constant
      min-len: 3
      # Minimum occurrences of constant string count to trigger issue
      min-occurrences: 3

    misspell:
      # Correct spellings using locale preferences for US or UK
      locale: US

    lll:
      # Max line length, lines longer will be reported
      line-length: 120
      # Tab width in spaces
      tab-width: 1

    unused: {}

    unparam:
      # Inspect exported functions
      check-exported: false

    nakedret:
      # Make an issue if func has more lines of code than this setting and it has naked returns
      max-func-lines: 30

    prealloc:
      # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them
      simple: true
      range-loops: true
      for-loops: false

    gocritic:
      # Enable multiple checks by tags
      enabled-tags:
        - diagnostic
        - experimental
        - opinionated
        - performance
        - style

      disabled-checks:
        - dupImport # https://github.com/go-critic/go-critic/issues/845
        - ifElseChain
        - octalLiteral
        - whyNoLint

    godox:
      # Report any comments starting with keywords
      keywords:
        - NOTE
        - OPTIMIZE
        - HACK

    revive:
      # See https://github.com/mgechev/revive#available-rules for details
      severity: warning
      rules:
        - name: atomic
        - name: blank-imports
        - name: bool-literal-in-expr
        - name: confusing-naming
        - name: constant-logical-expr
        - name: context-as-argument
        - name: context-keys-type
        - name: deep-exit
        - name: defer
        - name: dot-imports
        - name: duplicated-imports
        - name: early-return
        - name: empty-block
        - name: error-naming
        - name: error-return
        - name: error-strings
        - name: errorf
        - name: exported
        - name: identical-branches
        - name: if-return
        - name: increment-decrement
        - name: indent-error-flow
        - name: package-comments
        - name: range
        - name: receiver-naming
        - name: redefines-builtin-id
        - name: superfluous-else
        - name: time-naming
        - name: unexported-return
        - name: unreachable-code
        - name: unused-parameter
        - name: var-declaration
        - name: var-naming

    gosec:
      # Available rules: https://github.com/securego/gosec#available-rules
      includes:
        - G101 # Look for hard coded credentials
        - G102 # Bind to all interfaces
        - G103 # Audit the use of unsafe block
        - G104 # Audit errors not checked
        - G106 # Audit the use of ssh.InsecureIgnoreHostKey
        - G107 # Url provided to HTTP request as taint input
        - G108 # Profiling endpoint automatically exposed on /debug/pprof
        - G109 # Potential Integer overflow made by strconv.Atoi result conversion to int16/32
        - G110 # Potential DoS vulnerability via decompression bomb
        - G201 # SQL query construction using format string
        - G202 # SQL query construction using string concatenation
        - G203 # Use of unescaped data in HTML templates
        - G204 # Audit use of command execution
        - G301 # Poor file permissions used when creating a directory
        - G302 # Poor file permissions used with chmod
        - G303 # Creating tempfile using a predictable path
        - G304 # File path provided as taint input
        - G305 # File traversal when extracting zip/tar archive
        - G306 # Poor file permissions used when writing to a new file
        - G307 # Deferring a method which returns an error
        - G401 # Detect the usage of DES, RC4, MD5 or SHA1
        - G402 # Look for bad TLS connection settings
        - G403 # Ensure minimum RSA key length of 2048 bits
        - G404 # Insecure random number source (rand)
        - G501 # Import blocklist: crypto/md5
        - G502 # Import blocklist: crypto/des
        - G503 # Import blocklist: crypto/rc4
        - G504 # Import blocklist: net/http/cgi
        - G505 # Import blocklist: crypto/sha1
        - G601 # Implicit memory aliasing of items from a range statement

  # Linter enable/disable configuration
  default: none
  enable:
    # Enabled by default linters:
    - errcheck # Errcheck is a program for checking for unchecked errors in go programs
    - govet # Vet examines Go source code and reports suspicious constructs
    - ineffassign # Detects when assignments to existing variables are not used
    - staticcheck # It's a set of rules from staticcheck (includes gosimple and stylecheck in v2)
    - unused # Checks Go code for unused constants, variables, functions and types

    # Additional linters:
    - asasalint # Check for pass []any as any in variadic func(...any)
    - asciicheck # Simple linter to check that your code does not contain non-ASCII identifiers
    - bidichk # Checks for dangerous unicode character sequences
    - bodyclose # Checks whether HTTP response body is closed successfully
    - contextcheck # Check whether the function uses a non-inherited context
    - cyclop # Checks function and package cyclomatic complexity
    - dupl # Tool for code clone detection
    - durationcheck # Check for two durations multiplied together
    - errname # Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error
    - errorlint # Find code that will cause problems with the error wrapping scheme introduced in Go 1.13
    - exhaustive # Check exhaustiveness of enum switch statements
    - copyloopvar # A linter detects places where loop variables are copied (replaces exportloopref)
    - forbidigo # Forbids identifiers
    - funlen # Tool for detection of long functions
    - gocheckcompilerdirectives # Checks that go compiler directive comments (//go:) are valid
    - gochecknoinits # Checks that no init functions are present in Go code
    - gocognit # Computes and checks the cognitive complexity of functions
    - goconst # Finds repeated strings that could be replaced by a constant
    - gocritic # Provides diagnostics that check for bugs, performance and style issues
    - gocyclo # Computes and checks the cyclomatic complexity of functions
    - godox # Tool for detection of FIXME, TODO and other comment keywords
    - goheader # Checks is file header matches to pattern
    - mnd # An analyzer to detect magic numbers (replaces gomnd)
    - gomoddirectives # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod
    - gomodguard # Allow and block list linter for direct Go module dependencies
    - goprintffuncname # Checks that printf-like functions are named with f at the end
    - gosec # Inspects source code for security problems
    - grouper # An analyzer to analyze expression groups
    - importas # Enforces consistent import aliases
    - interfacebloat # A linter that checks the number of methods inside an interface
    - ireturn # Accept Interfaces, Return Concrete Types
    - lll # Reports long lines
    - loggercheck # Checks key value pairs for common logger libraries (kitlog,klog,logr,zap)
    - makezero # Finds slice declarations with non-zero initial length
    - misspell # Finds commonly misspelled English words in comments
    - nakedret # Finds naked returns in functions greater than a specified function length
    - nestif # Reports deeply nested if statements
    - nilerr # Finds the code that returns nil even if it checks that the error is not nil
    - nilnil # Checks that there is no simultaneous return of nil error and an invalid value
    - noctx # Finds sending http request without context.Context
    - nolintlint # Reports ill-formed or insufficient nolint directives
    - nonamedreturns # Reports all named returns
    - nosprintfhostport # Checks for misuse of Sprintf to construct a host with port in a URL
    - predeclared # Find code that shadows one of Go's predeclared identifiers
    - promlinter # Check Prometheus metrics naming via promlint
    - reassign # Checks that package variables are not reassigned
    - revive # Fast, configurable, extensible, flexible, and beautiful linter for Go
    - rowserrcheck # Checks whether Err of rows is checked successfully
    - sqlclosecheck # Checks that sql.Rows and sql.Stmt are closed
    - testableexamples # Checks if examples are testable (have an expected output)
    - thelper # Thelper detects Go test helpers without t.Helper() call and checks the consistency of test helpers
    - tparallel # Tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert # Remove unnecessary type conversions
    - unparam # Reports unused function parameters
    - usestdlibvars # A linter that detect the possibility to use variables/constants from the Go standard library
    - wastedassign # Wastedassign finds wasted assignment statements
    - whitespace # Tool for detection of leading and trailing whitespace

issues:
  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  new: false

# Configuration for severity
severity:
  # Default value is empty string.
  # Set the default severity for issues. If severity rules are defined and the issues
  # do not match or no severity is provided to the rule this will be the default
  # severity applied. Severities should match the supported severity names of the
  # selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#severity
  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  default: error
