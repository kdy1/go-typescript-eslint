name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Cancel in-progress runs for the same workflow + branch combination
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Linting job - runs in parallel with tests
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.2.0
          # Optional: show only new issues if it's a pull request
          only-new-issues: ${{ github.event_name == 'pull_request' }}
          # Optional: if set to true, then all caching functionality will be complete disabled
          skip-cache: false

  # Code formatting check
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Check formatting with gofmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted correctly:"
            gofmt -s -l .
            echo "Please run 'gofmt -s -w .' to format your code"
            exit 1
          fi

      - name: Install goimports
        run: go install golang.org/x/tools/cmd/goimports@latest

      - name: Check imports with goimports
        run: |
          if [ "$(goimports -l . | wc -l)" -gt 0 ]; then
            echo "The following files have incorrect imports:"
            goimports -l .
            echo "Please run 'goimports -w .' to fix imports"
            exit 1
          fi

  # Build and test job - runs across Go version matrix
  test:
    name: Test (Go ${{ matrix.go-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.21', '1.22', '1.23']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Build
        run: go build -v ./...

      - name: Run tests
        run: |
          # Suppress the "go: no such tool 'covdata'" warning which is harmless
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./... 2>&1 | \
            { grep -v '^go: no such tool "covdata"$' || true; }

      - name: Generate coverage report
        if: matrix.go-version == '1.23'
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to artifacts
        if: matrix.go-version == '1.23'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html
          retention-days: 30

      - name: Display coverage summary
        if: matrix.go-version == '1.23'
        run: |
          echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          go tool cover -func=coverage.out >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./...'
        continue-on-error: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif

  # All checks must pass
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, format, test, security]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.format.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs passed successfully!"
